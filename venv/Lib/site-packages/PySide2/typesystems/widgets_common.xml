<?xml version="1.0" encoding="UTF-8"?>
<!--
/****************************************************************************
**
** Copyright (C) 2018 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of Qt for Python.
**
** $QT_BEGIN_LICENSE:LGPL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Lesser General Public License Usage
** Alternatively, this file may be used under the terms of the GNU Lesser
** General Public License version 3 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL3 included in the
** packaging of this file. Please review the following information to
** ensure the GNU Lesser General Public License version 3 requirements
** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 2.0 or (at your option) the GNU General
** Public license version 3 or any later version approved by the KDE Free
** Qt Foundation. The licenses are as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-2.0.html and
** https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/
-->
<typesystem>

    <template name="replace_child">
        $CHILD_TYPE* oldChild = %CPPSELF.$FUNCTION_GET_OLD();
        if (oldChild &amp;&amp; (oldChild != $CPPARG)) {
            Shiboken::AutoDecRef pyChild(%CONVERTTOPYTHON[$CHILD_TYPE*](oldChild));
            Shiboken::Object::setParent(0, pyChild);
            Shiboken::Object::releaseOwnership(pyChild);
        }
        Shiboken::Object::setParent(%PYSELF, $PYARG);
    </template>

    <template name="qgraphicsitem_pysequence">
        int numItems = PySequence_Size(%PYARG_1);
        Shiboken::AutoArrayPointer&lt;QGraphicsItem*&gt; %out(numItems);
        for (int i=0; i &lt; numItems; i++) {
            %out[i] = %CONVERTTOCPP[QGraphicsItem*](PySequence_Fast_GET_ITEM(%PYARG_1, i));
        }
    </template>

    <template name="qgraphicsitem_pyobject">
        Shiboken::AutoDecRef object(PyList_New(0));
        for (int i=0, max=numItems; i &lt; max; i++) {
            PyList_Append(object, %CONVERTTOPYTHON[QGraphicsItem*](%in[i]));
        }
        PyObject *%out = object.object();
    </template>

    <template name="qstyleoptiongraphicsitem_pyobject">
        Shiboken::AutoDecRef option_object(PyList_New(0));
        for (int i=0, max=numItems; i &lt; max; i++) {
            const QStyleOptionGraphicsItem* item = &amp;%in[i];
            PyList_Append(option_object, %CONVERTTOPYTHON[QStyleOptionGraphicsItem](item));
        }
        PyObject* %out = option_object.object();
    </template>

    <template name="pysequence_qstyleoptiongraphicsitem">
        int numOptions = PySequence_Size(%PYARG_2);
        Shiboken::AutoArrayPointer&lt;QStyleOptionGraphicsItem&gt; %out(numOptions);
        for (int i=0; i &lt; numOptions; i++) {
            %out[i] = %CONVERTTOCPP[QStyleOptionGraphicsItem](PySequence_Fast_GET_ITEM(%PYARG_1, i));
        }
    </template>

    <template name="pysequencesize_int">
        int %out = PySequence_Size(%PYARG_1);
    </template>

</typesystem>
